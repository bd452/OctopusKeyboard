//
//  Created by K3A on 5/20/12.
//  Copyright (c) 2012 K3A. All rights reserved.
//

#pragma once

#include <mach/mach.h>
#include <servers/bootstrap.h>

typedef char string_t[1024];

typedef struct {
    int32_t uptime; //uptime in seconds
} ostats_t;

enum eKeyLayout
{
    KL_iphone_en_US
};

enum eSeekOrigin
{
    SO_CURRENT,
    SO_START,
    SO_END
};

enum eCapitalizationMode
{
    CM_NONE,
    CM_SENTENCE,
    CM_ALL,
};

enum eInputLearnOptions
{
    IL_ALL,
    IL_CURR_WORD_GROUP, // current word group
    IL_PREV_WORD_GROUP, // word group before the last space
};



enum eSuggType
{
    ST_NONE = 0,
    ST_WORD = 1, // word sugg
    ST_ELISON = 2,
    ST_PREFIXMATCH = 4, // The suggestion contains a valid prefix from the loaded dictionaries. The prefix may or may not be a complete word.
    ST_CONTENT = 8, // contains tagged content
    ST_PUNCTUATIONLIST = 16, // The suggestion is based on the text before the cursor and a variable punctuation list.
    ST_ACRONYMEXPANSION = 32, // The suggestion expands an acronym to its full form.
    ST_ERRORCORRECTION = 64, 
    ST_SPACECONTRACTION = 128, // The suggestion ignores the previous space in the buffer.
    ST_NEXTLETTER = 256, // The suggestion text represents a set of letters that would match a valid suggestion.
    ST_COMPOSITION = 512, // The suggestion contains the character contained in the composition string
    ST_PROXIMITYSUGGESTION = 1024, //This suggestion is generated by the proximity suggestion algorithm.
};

#define O_MAX_SUGGESTIONS 8
#define O_MAX_WORD_LENGTH 256

typedef char oword_t[O_MAX_WORD_LENGTH+1];
typedef oword_t* oword_t_ptr;

//265 B
typedef struct
{
    unsigned ident;
    oword_t word;
    int type; // bitfield
} sSugg;

// 8 + 265*8 = 2128
typedef struct
{
    unsigned count;
    unsigned set;
    sSugg suggs[O_MAX_SUGGESTIONS];
} sSuggestions;

// 1024+4+4+8+4+8
typedef struct 
{
    string_t name;
	string_t language;
    uint32_t version;
    uint32_t componentId;
    bool     active;
    uint32_t priority;
    bool     loaded;
} sDictionary;
typedef sDictionary* sDictionaryArray;

typedef struct {
    mach_msg_header_t head;
    
    // The following fields do not represent the actual layout of the request
    // and reply messages that MIG will use. However, a request or reply
    // message will not be larger in size than the sum of the sizes of these
    // fields. We need the size to put an upper bound on the size of an
    // incoming message in a mach_msg() call.
    NDR_record_t NDR;
    union {
        string_t string;
		sSuggestions suggs;
        //other types
    } data;
    
    kern_return_t RetCode;
    mach_msg_trailer_t trailer;
} msg_octopus_t;

#define OCTOPUS_SERVICE "me.k3a.octopusd"









